import { UserKeyDefinition } from "@bitwarden/common/platform/state";
import { Constraints } from "@bitwarden/common/tools/types";

import { Randomizer } from "../abstractions";
import { SshKeyNativeGenerator } from "../abstractions/sshkey-native-generator.abstraction";
import { CredentialAlgorithm, CredentialCategory, PolicyConfiguration } from "../types";

import { CredentialGenerator } from "./credential-generator";

/** Credential generator metadata common across credential generators */
export type CredentialGeneratorInfo = {
  /** Uniquely identifies the credential configuration
   */
  id: CredentialAlgorithm;

  /** The kind of credential generated by this configuration */
  category: CredentialCategory;

  /** Key used to localize the credential name in the I18nService */
  nameKey: string;

  /** Key used to localize the credential description in the I18nService  */
  descriptionKey?: string;

  /** When true, credential generation must be explicitly requested.
   *  @remarks this property is useful when credential generation
   *   carries side effects, such as configuring a service external
   *   to Bitwarden.
   */
  onlyOnRequest: boolean;
};

/** Credential generator metadata that relies upon typed setting and policy definitions. */
export type CredentialGeneratorConfiguration<Settings, Policy> = CredentialGeneratorInfo & {
  /** An algorithm that generates credentials when ran. */
  engine: {
    /** Factory for the generator
     */
    // FIXME: note that this erases the engine's type so that credentials are
    // generated uniformly. This property needs to be maintained for
    // the credential generator, but engine configurations should return
    // the underlying type. `create` may be able to do double-duty w/ an
    // engine definition if `CredentialGenerator` can be made covariant.
    create: (
      randomizer: Randomizer,
      sshGenerator: SshKeyNativeGenerator,
    ) => CredentialGenerator<Settings>;
  };
  /** Defines the stored parameters for credential generation */
  settings: {
    /** value used when an account's settings haven't been initialized */
    initial: Readonly<Partial<Settings>>;

    /** Application-global constraints that apply to account settings */
    constraints: Constraints<Settings>;

    /** storage location for account-global settings */
    account: UserKeyDefinition<Settings>;
  };

  /** defines how to construct policy for this settings instance */
  policy: PolicyConfiguration<Policy, Settings>;
};
